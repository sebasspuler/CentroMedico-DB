/*
Deployment script for CentroMedicoPrueba

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CentroMedicoPrueba"
:setvar DefaultFilePrefix "CentroMedicoPrueba"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating User-Defined Data Type [dbo].[Especialidad]...';


GO
CREATE TYPE [dbo].[Especialidad]
    FROM INT NOT NULL;


GO
PRINT N'Creating User-Defined Data Type [dbo].[historia]...';


GO
CREATE TYPE [dbo].[historia]
    FROM INT NOT NULL;


GO
PRINT N'Creating User-Defined Data Type [dbo].[medico]...';


GO
CREATE TYPE [dbo].[medico]
    FROM INT NOT NULL;


GO
PRINT N'Creating User-Defined Data Type [dbo].[observacion]...';


GO
CREATE TYPE [dbo].[observacion]
    FROM VARCHAR (1000) NOT NULL;


GO
PRINT N'Creating User-Defined Data Type [dbo].[paciente]...';


GO
CREATE TYPE [dbo].[paciente]
    FROM INT NOT NULL;


GO
PRINT N'Creating User-Defined Data Type [dbo].[turno]...';


GO
CREATE TYPE [dbo].[turno]
    FROM INT NOT NULL;


GO
PRINT N'Creating Table [dbo].[Concepto]...';


GO
CREATE TABLE [dbo].[Concepto] (
    [idConcepto]  TINYINT       IDENTITY (1, 1) NOT NULL,
    [descripcion] VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([idConcepto] ASC)
);


GO
PRINT N'Creating Table [dbo].[Especialidad]...';


GO
CREATE TABLE [dbo].[Especialidad] (
    [idEspecialidad] [dbo].[Especialidad] IDENTITY (1, 1) NOT NULL,
    [Especialidad]   VARCHAR (30)         NULL,
    CONSTRAINT [PK_Especialidad] PRIMARY KEY CLUSTERED ([idEspecialidad] ASC)
);


GO
PRINT N'Creating Table [dbo].[Historia]...';


GO
CREATE TABLE [dbo].[Historia] (
    [idHistoria]    [dbo].[historia]    IDENTITY (1, 1) NOT NULL,
    [fechaHistoria] DATETIME            NULL,
    [observacion]   [dbo].[observacion] NULL,
    CONSTRAINT [PK_Historia] PRIMARY KEY CLUSTERED ([idHistoria] ASC)
);


GO
PRINT N'Creating Table [dbo].[HistoriaPaciente]...';


GO
CREATE TABLE [dbo].[HistoriaPaciente] (
    [idHistoria] [dbo].[historia] NOT NULL,
    [idPaciente] [dbo].[paciente] NOT NULL,
    [idMedico]   [dbo].[medico]   NOT NULL,
    CONSTRAINT [PK_HistoriaPaciente] PRIMARY KEY CLUSTERED ([idHistoria] ASC, [idPaciente] ASC, [idMedico] ASC)
);


GO
PRINT N'Creating Table [dbo].[Medico]...';


GO
CREATE TABLE [dbo].[Medico] (
    [idMedico] [dbo].[medico] IDENTITY (1, 1) NOT NULL,
    [nombre]   VARCHAR (50)   NOT NULL,
    [apellido] VARCHAR (50)   NOT NULL,
    CONSTRAINT [PK_Medico] PRIMARY KEY CLUSTERED ([idMedico] ASC)
);


GO
PRINT N'Creating Table [dbo].[MedicoEspecialidad]...';


GO
CREATE TABLE [dbo].[MedicoEspecialidad] (
    [idMedico]       [dbo].[medico]       NOT NULL,
    [idEspecialidad] [dbo].[Especialidad] NOT NULL,
    [descripcion]    VARCHAR (50)         NULL,
    CONSTRAINT [PK_MedicoEspecialidad] PRIMARY KEY CLUSTERED ([idMedico] ASC, [idEspecialidad] ASC)
);


GO
PRINT N'Creating Table [dbo].[Paciente]...';


GO
CREATE TABLE [dbo].[Paciente] (
    [idPaciente]  [dbo].[paciente]    IDENTITY (1, 1) NOT NULL,
    [dni]         VARCHAR (20)        NULL,
    [nombre]      VARCHAR (50)        NOT NULL,
    [apellido]    VARCHAR (50)        NOT NULL,
    [fNacimiento] DATE                NOT NULL,
    [domicilio]   VARCHAR (50)        NOT NULL,
    [idPais]      CHAR (3)            NULL,
    [telefono]    VARCHAR (20)        NULL,
    [email]       VARCHAR (30)        NOT NULL,
    [observacion] [dbo].[observacion] NULL,
    CONSTRAINT [PK_Paciente] PRIMARY KEY CLUSTERED ([idPaciente] ASC)
);


GO
PRINT N'Creating Table [dbo].[PacienteLog]...';


GO
CREATE TABLE [dbo].[PacienteLog] (
    [idPaciente]        [dbo].[paciente] NOT NULL,
    [idPais]            CHAR (3)         NULL,
    [fechaAlta]         DATETIME         NULL,
    [fechaModificacion] DATETIME         NULL,
    [fechaBaja]         DATETIME         NULL,
    CONSTRAINT [PK_PacienteLog] PRIMARY KEY CLUSTERED ([idPaciente] ASC)
);


GO
PRINT N'Creating Table [dbo].[Pago]...';


GO
CREATE TABLE [dbo].[Pago] (
    [idPago]      INT                 IDENTITY (1, 1) NOT NULL,
    [concepto]    TINYINT             NOT NULL,
    [fecha]       DATETIME            NOT NULL,
    [monto]       MONEY               NOT NULL,
    [estado]      TINYINT             NOT NULL,
    [observacion] [dbo].[observacion] NULL,
    CONSTRAINT [PK__Pago__BD2295AD2C51CE5E] PRIMARY KEY CLUSTERED ([idPago] ASC)
);


GO
PRINT N'Creating Table [dbo].[PagoPaciente]...';


GO
CREATE TABLE [dbo].[PagoPaciente] (
    [idPago]     INT              NOT NULL,
    [idPaciente] [dbo].[paciente] NOT NULL,
    [idTurno]    [dbo].[turno]    NOT NULL,
    CONSTRAINT [PK__PagoPaci__82C033A9BD796416] PRIMARY KEY CLUSTERED ([idPago] ASC, [idPaciente] ASC, [idTurno] ASC)
);


GO
PRINT N'Creating Table [dbo].[Pais]...';


GO
CREATE TABLE [dbo].[Pais] (
    [idPais] CHAR (3)     NOT NULL,
    [Pais]   VARCHAR (30) NULL,
    CONSTRAINT [PK_Pais] PRIMARY KEY CLUSTERED ([idPais] ASC)
);


GO
PRINT N'Creating Table [dbo].[Turno]...';


GO
CREATE TABLE [dbo].[Turno] (
    [idTurno]     [dbo].[turno]       IDENTITY (1, 1) NOT NULL,
    [fechaTurno]  DATETIME            NULL,
    [estado]      SMALLINT            NULL,
    [observacion] [dbo].[observacion] NULL,
    CONSTRAINT [PK_Turno] PRIMARY KEY CLUSTERED ([idTurno] ASC)
);


GO
PRINT N'Creating Table [dbo].[TurnoEstado]...';


GO
CREATE TABLE [dbo].[TurnoEstado] (
    [idEstado]    SMALLINT     IDENTITY (1, 1) NOT NULL,
    [descripcion] VARCHAR (50) NULL,
    CONSTRAINT [PK_idEstado] PRIMARY KEY CLUSTERED ([idEstado] ASC)
);


GO
PRINT N'Creating Table [dbo].[TurnoPaciente]...';


GO
CREATE TABLE [dbo].[TurnoPaciente] (
    [idTurno]    [dbo].[turno]    NOT NULL,
    [idPaciente] [dbo].[paciente] NOT NULL,
    [idMedico]   [dbo].[medico]   NOT NULL,
    CONSTRAINT [PK_TurnoPaciente] PRIMARY KEY CLUSTERED ([idTurno] ASC, [idPaciente] ASC, [idMedico] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[HistoriaPaciente]...';


GO
ALTER TABLE [dbo].[HistoriaPaciente] WITH NOCHECK
    ADD FOREIGN KEY ([idPaciente]) REFERENCES [dbo].[Paciente] ([idPaciente]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HistoriaPaciente_Historia]...';


GO
ALTER TABLE [dbo].[HistoriaPaciente] WITH NOCHECK
    ADD CONSTRAINT [FK_HistoriaPaciente_Historia] FOREIGN KEY ([idHistoria]) REFERENCES [dbo].[Historia] ([idHistoria]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HistoriaPaciente_Medico]...';


GO
ALTER TABLE [dbo].[HistoriaPaciente] WITH NOCHECK
    ADD CONSTRAINT [FK_HistoriaPaciente_Medico] FOREIGN KEY ([idMedico]) REFERENCES [dbo].[Medico] ([idMedico]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MedicoEspecialidad_Especialidad]...';


GO
ALTER TABLE [dbo].[MedicoEspecialidad] WITH NOCHECK
    ADD CONSTRAINT [FK_MedicoEspecialidad_Especialidad] FOREIGN KEY ([idEspecialidad]) REFERENCES [dbo].[Especialidad] ([idEspecialidad]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MedicoEspecialidad_Medico]...';


GO
ALTER TABLE [dbo].[MedicoEspecialidad] WITH NOCHECK
    ADD CONSTRAINT [FK_MedicoEspecialidad_Medico] FOREIGN KEY ([idMedico]) REFERENCES [dbo].[Medico] ([idMedico]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Paciente]...';


GO
ALTER TABLE [dbo].[Paciente] WITH NOCHECK
    ADD FOREIGN KEY ([idPais]) REFERENCES [dbo].[Pais] ([idPais]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Pago_Concepto]...';


GO
ALTER TABLE [dbo].[Pago] WITH NOCHECK
    ADD CONSTRAINT [FK_Pago_Concepto] FOREIGN KEY ([concepto]) REFERENCES [dbo].[Concepto] ([idConcepto]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_PagoPaciente_Paciente]...';


GO
ALTER TABLE [dbo].[PagoPaciente] WITH NOCHECK
    ADD CONSTRAINT [FK_PagoPaciente_Paciente] FOREIGN KEY ([idPaciente]) REFERENCES [dbo].[Paciente] ([idPaciente]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_PagoPaciente_Pago]...';


GO
ALTER TABLE [dbo].[PagoPaciente] WITH NOCHECK
    ADD CONSTRAINT [FK_PagoPaciente_Pago] FOREIGN KEY ([idPago]) REFERENCES [dbo].[Pago] ([idPago]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_PagoPaciente_Turno]...';


GO
ALTER TABLE [dbo].[PagoPaciente] WITH NOCHECK
    ADD CONSTRAINT [FK_PagoPaciente_Turno] FOREIGN KEY ([idTurno]) REFERENCES [dbo].[Turno] ([idTurno]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Turno_TurnoEstado]...';


GO
ALTER TABLE [dbo].[Turno] WITH NOCHECK
    ADD CONSTRAINT [FK_Turno_TurnoEstado] FOREIGN KEY ([estado]) REFERENCES [dbo].[TurnoEstado] ([idEstado]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TurnoPaciente_Medico]...';


GO
ALTER TABLE [dbo].[TurnoPaciente] WITH NOCHECK
    ADD CONSTRAINT [FK_TurnoPaciente_Medico] FOREIGN KEY ([idMedico]) REFERENCES [dbo].[Medico] ([idMedico]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TurnoPaciente_Paciente]...';


GO
ALTER TABLE [dbo].[TurnoPaciente] WITH NOCHECK
    ADD CONSTRAINT [FK_TurnoPaciente_Paciente] FOREIGN KEY ([idPaciente]) REFERENCES [dbo].[Paciente] ([idPaciente]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TurnoPaciente_Turno]...';


GO
ALTER TABLE [dbo].[TurnoPaciente] WITH NOCHECK
    ADD CONSTRAINT [FK_TurnoPaciente_Turno] FOREIGN KEY ([idTurno]) REFERENCES [dbo].[Turno] ([idTurno]);


GO
PRINT N'Creating Trigger [dbo].[PacientesEliminados]...';


GO
CREATE TRIGGER PacientesEliminados ON Paciente
FOR DELETE

AS

IF EXISTS (SELECT idpaciente FROM PacienteLog
			WHERE idpaciente = (SELECT idpaciente FROM Deleted))
	UPDATE PacienteLog SET fechaBaja = GETDATE()
		WHERE idpaciente = (SELECT idpaciente FROM Deleted)
ELSE
	INSERT INTO PacienteLog (idpaciente, idpais, fechaBaja)
	SELECT idPaciente, idPais, GETDATE() FROM Deleted
GO
PRINT N'Creating Trigger [dbo].[PacientesModificados]...';


GO
CREATE TRIGGER PacientesModificados ON Paciente
AFTER UPDATE


AS

IF EXISTS (SELECT idPaciente from PacienteLog WHERE idPaciente = (SELECT idPaciente FROM inserted))
	UPDATE PacienteLog SET fechaModificacion = GETDATE()
	WHERE idPaciente = (SELECT idPaciente FROM inserted)
ELSE
	INSERT INTO PacienteLog (idPaciente, idPais,fechaModificacion)
	SELECT idPaciente, idPais, GETDATE() from inserted
GO
PRINT N'Creating Trigger [dbo].[PacienteCreados]...';


GO
CREATE TRIGGER PacienteCreados ON Paciente
AFTER INSERT

AS

IF (SELECT idPais from inserted) = 'MEX'
	INSERT INTO PacienteLog (idPaciente, idPais, fechaAlta)
		SELECT i.idPaciente, i.idPais, GETDATE() from inserted i
GO
PRINT N'Creating View [dbo].[MedicosEspecialidades]...';


GO
CREATE VIEW MedicosEspecialidades AS

SELECT M.idMedico, M.nombre, M.apellido, ME.idEspecialidad, ME.descripcion FROM Medico M
INNER JOIN MedicoEspecialidad ME
ON ME.idMedico = M.idMedico
GO
PRINT N'Creating View [dbo].[PacientesTurnosPendientes]...';


GO
CREATE VIEW PacientesTurnosPendientes AS

SELECT P.idPaciente, P.nombre, P.apellido, T.idTurno, T.estado 
	FROM Paciente P
	INNER JOIN TurnoPaciente TP
	ON TP.idPaciente = P.idPaciente
	INNER JOIN Turno T
	ON T.idTurno = TP.idTurno
where isnull(t.estado,0) = 0
GO
PRINT N'Creating View [dbo].[VistaPrueba]...';


GO
CREATE VIEW dbo.VistaPrueba
AS
SELECT        dbo.Paciente.idPaciente, dbo.Paciente.nombre, dbo.Paciente.apellido, dbo.Turno.estado
FROM            dbo.Paciente INNER JOIN
                         dbo.TurnoPaciente ON dbo.Paciente.idPaciente = dbo.TurnoPaciente.idPaciente INNER JOIN
                         dbo.Turno ON dbo.TurnoPaciente.idTurno = dbo.Turno.idTurno
WHERE        (ISNULL(dbo.Turno.estado, 0) = 0)
GO
PRINT N'Creating Function [dbo].[concatenar]...';


GO
--Función Escalar.
CREATE FUNCTION concatenar(
				@apellido varchar(50),
				@nombre varchar(50)		
				)
RETURNS varchar(100)

AS

BEGIN
	DECLARE @resultado varchar(100)
	set @resultado = @apellido + ', ' + @nombre
	return @resultado
END

--SELECT dbo.concatenar('Lopez', 'Roberto') as Resultado
GO
PRINT N'Creating Function [dbo].[FuncionFechaTexto]...';


GO
CREATE FUNCTION FuncionFechaTexto(@fecha datetime)

RETURNS VARCHAR(60)

as

BEGIN

declare @dia varchar(20)
declare @mes varchar(20)
declare @fechatexto varchar(50)

set @dia = (CASE WHEN datepart(dw,@fecha) = 1 THEN 'Domingo ' + convert(char(2),datepart(dd,@fecha))
				WHEN datepart(dw,@fecha) = 2 THEN 'Lunes ' + convert(char(2),datepart(dd,@fecha))	
				WHEN datepart(dw,@fecha) = 3 THEN 'Martes ' + convert(char(2),datepart(dd,@fecha))	
				WHEN datepart(dw,@fecha) = 4 THEN 'Miércoles ' + convert(char(2),datepart(dd,@fecha))	
				WHEN datepart(dw,@fecha) = 5 THEN 'Jueves ' + convert(char(2),datepart(dd,@fecha))	
				WHEN datepart(dw,@fecha) = 6 THEN 'Viernes ' + convert(char(2),datepart(dd,@fecha))	
				WHEN datepart(dw,@fecha) = 7 THEN 'Sábado ' + convert(char(2),datepart(dd,@fecha))	
			END)


set @mes = (CASE WHEN datepart(mm,@fecha) = 1 THEN 'Enero'
				WHEN datepart(mm,@fecha) = 2 THEN 'Febrero'
				WHEN datepart(mm,@fecha) = 3 THEN 'Marzo'
				WHEN datepart(mm,@fecha) = 4 THEN 'Abril'
				WHEN datepart(mm,@fecha) = 5 THEN 'Mayo'
				WHEN datepart(mm,@fecha) = 6 THEN 'Junio'
				WHEN datepart(mm,@fecha) = 7 THEN 'Julio'
				WHEN datepart(mm,@fecha) = 8 THEN 'Agosto'
				WHEN datepart(mm,@fecha) = 9 THEN 'Septiembre'
				WHEN datepart(mm,@fecha) = 10 THEN 'Octubre'
				WHEN datepart(mm,@fecha) = 11 THEN 'Noviembre'
				WHEN datepart(mm,@fecha) = 12 THEN 'Diciembre'
			END)

set @fechatexto = @dia + ' de ' + @mes
RETURN @fechatexto

END
GO
PRINT N'Creating Function [dbo].[funcMultiplicar]...';


GO

CREATE FUNCTION funcMultiplicar (@var int)
returns int --valor que retorna la función.

AS

BEGIN
	set @var = @var * 5
	return @var
END
GO
PRINT N'Creating Function [dbo].[obtenerPais]...';


GO
CREATE FUNCTION obtenerPais(
				@idPaciente paciente)
RETURNS varchar(50)

AS

BEGIN
	DECLARE @pais varchar(50)
	SET @pais = (SELECT PA.Pais FROM Paciente P
					INNER JOIN Pais PA
					ON PA.idPais = P.idPais
					WHERE idPaciente = @idPaciente)
	RETURN @pais
END
GO
PRINT N'Creating Function [dbo].[listaPaises]...';


GO
CREATE FUNCTION listaPaises()
RETURNS @paises TABLE(idpais char (3), pais varchar(50))

AS

BEGIN
	INSERT INTO @paises values ('ESP', 'España')
	INSERT INTO @paises values ('MEX', 'Mexico')
	INSERT INTO @paises values ('CHI', 'Chile')
	INSERT INTO @paises values ('PER', 'Perú')
	INSERT INTO @paises values ('ARG', 'Argentina')

	RETURN
END
GO
PRINT N'Creating Procedure [dbo].[ALTA_Medico]...';


GO
/*
SELECT * FROM Medico
SELECT * FROM Especialidad
SELECT * FROM MedicoEspecialidad
*/

CREATE PROC ALTA_Medico (
			@nombre varchar(50),
			@apellido varchar(50),
			@idEspecialidad int,
			@descripcion varchar(50)
)

as
set nocount on

IF NOT EXISTS (SELECT TOP 1 idMedico FROM Medico WHERE nombre = @nombre and apellido = @apellido)
BEGIN
	INSERT INTO Medico (nombre, apellido) 
	VALUES (@nombre, @apellido)

	DECLARE @auxMedico medico
	set @auxMedico = @@IDENTITY

	INSERT INTO MedicoEspecialidad (idMedico, idEspecialidad, descripcion) 
	VALUES (@auxMedico, @idEspecialidad, @descripcion)

	PRINT 'Medico agregado con exito'
	RETURN

END
ELSE
BEGIN
	PRINT 'El médico ya existe'
END
GO
PRINT N'Creating Procedure [dbo].[ALTA_Paciente]...';


GO
CREATE PROC [ALTA_Paciente](
			@dni varchar(20),
			@nombre varchar(50),
			@apellido varchar(50),
			@fNacimiento varchar(8),
			@domicilio varchar(50),
			@idPais char(3),
			@tel varchar(20) = '',
			@email varchar(30),
			@observacion varchar(1000) = ''
			)
as

IF NOT EXISTS (SELECT * FROM Paciente WHERE dni = @dni)
BEGIN
	INSERT INTO Paciente (dni, nombre, apellido, fNacimiento, domicilio, idPais, telefono, email, observacion)
	VALUES (@dni, @nombre, @apellido, @fNacimiento, @domicilio, @idPais, @tel, @email, @observacion)
	PRINT 'El paciente se agrego correctamente'
	RETURN
END
ELSE
BEGIN
	PRINT 'El paciente ya existe'
	RETURN
END
GO
PRINT N'Creating Procedure [dbo].[ALTA_Turno]...';


GO
/*
select * from Turno
select * from TurnoPaciente
select * from Paciente
select * from Medico
*/

--EXEC Alta_Turno '20190215 08:15', 2, 1, 'El paciente tiene que estar en ayunas'

CREATE PROC ALTA_Turno (
				@fechaTurno char(14), --20190215 12:00
				@idPaciente paciente,
				@idMedico medico,
				@observacion observacion = ''
)

as

/*
ESTADO = 0 (Pendiente)
ESTADO = 1 (Realizado)
ESTADO = 2 (Cancelado)
*/

SET NOCOUNT ON

IF NOT EXISTS(SELECT TOP 1 idTurno FROM Turno WHERE fechaTurno = @fechaTurno) 
BEGIN
	INSERT INTO Turno (fechaTurno, estado, observacion) 
	VALUES (@fechaTurno, 0, @observacion)

	DECLARE @auxIdTurno turno
	set @auxIdTurno = @@IDENTITY

	INSERT INTO TurnoPaciente (idTurno, idPaciente, idMedico)
	VALUES (@auxIdTurno, @idPaciente, @idMedico)

	PRINT 'El turno se agrego correctamente'
	RETURN
END
ELSE
BEGIN
	PRINT 'Ese turno, ya existe'
	RETURN
END
GO
PRINT N'Creating Procedure [dbo].[DELETE_Turno]...';


GO
--EXEC DELETE_Turno 15

CREATE PROC DELETE_Turno(
					@idTurno turno
					)

as
set nocount on

/*
SELECT * FROM Turno
SELECT * FROM TurnoPaciente
*/

IF EXISTS(SELECT * FROM Turno WHERE idTurno = @idTurno)
BEGIN
	DELETE FROM TurnoPaciente WHERE idTurno = @idTurno
	DELETE FROM Turno WHERE idTurno = @idTurno	
END
ELSE
	PRINT 'Ese turno no existe'
GO
PRINT N'Creating Procedure [dbo].[SELECT_EspecialidadesMedica]...';


GO
CREATE PROC SELECT_EspecialidadesMedica

as
set nocount on


IF EXISTS (SELECT * FROM Especialidad)
	SELECT * FROM Especialidad
ELSE
	SELECT 0 as Resultado
GO
PRINT N'Creating Procedure [dbo].[SELECT_HistoriaPaciente]...';


GO
--exec SELECT_HistoriaPaciente 6

CREATE PROC SELECT_HistoriaPaciente(
				@idPaciente paciente
				)



as
set nocount on

/*
select * from historia
select * from historiaPaciente
select * from paciente
select * from medico

*/

if exists(SELECT * FROM Paciente P
				INNER JOIN HistoriaPaciente HP
				ON HP.idPaciente = P.idPaciente
				INNER JOIN Historia H
				ON H.idHistoria = HP.idHistoria
				INNER JOIN MedicoEspecialidad ME
				ON ME.idMedico = HP.idMedico
				INNER JOIN Medico M
				ON M.idMedico = ME.idMedico
				WHERE P.idPaciente = @idPaciente)
	SELECT * FROM Paciente P
	INNER JOIN HistoriaPaciente HP
	ON HP.idPaciente = P.idPaciente
	INNER JOIN Historia H
	ON H.idHistoria = HP.idHistoria
	INNER JOIN MedicoEspecialidad ME
	ON ME.idMedico = HP.idMedico
	INNER JOIN Medico M
	ON M.idMedico = ME.idMedico
	WHERE P.idPaciente = @idPaciente

ELSE
	PRINT 'No existe historias clinicas para el paciente'
	select 0 as Resultado
GO
PRINT N'Creating Procedure [dbo].[SELECT_Paciente]...';


GO
CREATE PROC [dbo].[SELECT_Paciente] ( --creamos el store procedure
			@idPaciente int --definimos variable de entrada
)
AS 

--A partir de acá vienen todos los scripts que queramos ejecutar.

SELECT apellido, nombre, idPais, observacion,
	(SELECT Pais from Pais ps WHERE ps.idPais = pa.idPais) descPais
FROM Paciente pa WHERE idPaciente = @idPaciente
GO
PRINT N'Creating Procedure [dbo].[SELECT_TurnosPaciente]...';


GO
CREATE PROC [SELECT_TurnosPaciente](
				@idPaciente paciente	
				)



as
set nocount on

SELECT * FROM Paciente P
INNER JOIN TurnoPaciente TP
ON TP.idPaciente = P.idPaciente
INNER JOIN Turno T
ON T.idTurno = TP.idTurno
INNER JOIN MedicoEspecialidad ME
ON ME.idMedico = TP.idMedico
WHERE P.idPaciente = @idPaciente
GO
PRINT N'Creating Procedure [dbo].[UPDATE_Medico]...';


GO
CREATE PROC UPDATE_Medico(
					@idMedico medico,
					@nombre varchar(50),
					@apellido varchar(50)
					)
as
set nocount on

/*
--SELECT * FROM MEDICO
*/

IF EXISTS(SELECT * FROM MEDICO WHERE idMedico = @idMedico)
	UPDATE Medico SET nombre = @nombre, apellido = @apellido
	WHERE idMedico = @idMedico
ELSE
	Print 'No existe ese Médico'
GO
PRINT N'Creating Procedure [dbo].[UPDATE_Paciente]...';


GO
CREATE PROC UPDATE_Paciente(
					@idPaciente paciente,
					@dni varchar(20),
					@telefono varchar(20),
					@observacion observacion
					)

as
set nocount on

/*
select * from Paciente
*/

IF EXISTS(SELECT * FROM Paciente WHERE idPaciente = @idPaciente)
	UPDATE Paciente SET dni = @dni, telefono = @telefono, observacion = @observacion
	WHERE idPaciente = @idPaciente
ELSE
	PRINT 'Ese paciente no existe'
GO
PRINT N'Creating Procedure [dbo].[UPDATE_Turno]...';


GO

--EXEC UPDATE_Turno 8, 3, 'El paciente llamo para cancelar el turno'

CREATE PROC UPDATE_Turno(
					@idTurno turno,
					@estado tinyint,
					@observacion observacion
					)

as
set nocount on

/*
select * from turno
select * from turnopaciente

*/

if exists (SELECT * FROM Turno WHERE idTurno = @idTurno)
	UPDATE Turno SET estado = @estado, observacion = @observacion
	WHERE idTurno = @idTurno
ELSE
	Print 'No existe el turno'
GO
PRINT N'Creating Extended Property [dbo].[VistaPrueba].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VistaPrueba';


GO
PRINT N'Creating Extended Property [dbo].[VistaPrueba].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "Paciente"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Turno"
            Begin Extent = 
               Top = 34
               Left = 579
               Bottom = 164
               Right = 749
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "TurnoPaciente"
            Begin Extent = 
               Top = 151
               Left = 300
               Bottom = 264
               Right = 470
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 2895
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VistaPrueba';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[MedicoEspecialidad] WITH CHECK CHECK CONSTRAINT [FK_MedicoEspecialidad_Especialidad];

ALTER TABLE [dbo].[MedicoEspecialidad] WITH CHECK CHECK CONSTRAINT [FK_MedicoEspecialidad_Medico];

ALTER TABLE [dbo].[Pago] WITH CHECK CHECK CONSTRAINT [FK_Pago_Concepto];

ALTER TABLE [dbo].[PagoPaciente] WITH CHECK CHECK CONSTRAINT [FK_PagoPaciente_Paciente];

ALTER TABLE [dbo].[PagoPaciente] WITH CHECK CHECK CONSTRAINT [FK_PagoPaciente_Pago];

ALTER TABLE [dbo].[PagoPaciente] WITH CHECK CHECK CONSTRAINT [FK_PagoPaciente_Turno];

ALTER TABLE [dbo].[Turno] WITH CHECK CHECK CONSTRAINT [FK_Turno_TurnoEstado];

ALTER TABLE [dbo].[TurnoPaciente] WITH CHECK CHECK CONSTRAINT [FK_TurnoPaciente_Medico];

ALTER TABLE [dbo].[TurnoPaciente] WITH CHECK CHECK CONSTRAINT [FK_TurnoPaciente_Paciente];

ALTER TABLE [dbo].[TurnoPaciente] WITH CHECK CHECK CONSTRAINT [FK_TurnoPaciente_Turno];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.HistoriaPaciente'), OBJECT_ID(N'dbo.Paciente'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
